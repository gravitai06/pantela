openapi: 3.0.0
info:
  title: API
  version: 1.0.0

paths:
  # Пути для задач
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          required: false
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /tasks/{id}:
    patch:
      summary: Update a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The task data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    delete:
      summary: Delete a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully

  # Пути для пользователей
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      summary: Create a new user
      tags:
        - users
      requestBody:
        description: The user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{id}:
    patch:
      summary: Update a user
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The user data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    delete:
      summary: Delete a user
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully

  /users/{id}/tasks:
    get:
      summary: Get tasks for a user
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tasks for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTasksForUserResponseObject'

components:
  schemas:
    TaskResponse:
      type: object
      properties:
        id:
          type: string  # ID остается строкой
        task:
          type: string
        is_done:
          type: boolean
        user_id:
          type: string  # user_id тоже строка

    CreateTaskRequest:
      type: object
      properties:
        task:
          type: string
        is_done:
          type: boolean
        user_id:
          type: string
      required:
        - task
        - is_done
        - user_id

    UpdateTaskRequest:
      type: object
      properties:
        task:
          type: string
        is_done:
          type: boolean
        user_id:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        password:
          type: string
        deleted_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    GetTasksForUserResponseObject:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
